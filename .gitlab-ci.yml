image: docker:dind

variables:
  PROJECT: beano
  PACKAGE_NAME: apic-agents-sdk
  BINTRAY_NAMESPACE: agent
  DOCKER_DRIVER: overlay2
  DEPENDENCY_CHECK_FLAGS: "--scan=**/*"

stages:
  - test
  - sonar
  - security-scans
  - security-review
  - release

############################################################
# Section for restrictions
############################################################
.except-feature: &except-feature
  only:
    - master
    - dev
    - tags
  except:
    - web
    - triggers

.only-feature: &only-feature
  only:
    - /^APIGOV-.*$/
  except:
    - web
    - triggers

.only-dev: &only-dev
  only:
    - dev
  except:
    - web
    - triggers

.only-protected: &only-protected
  only:
    - master
    - dev
  except:
    - web
    - triggers

.all: &all
  only:
    - master
    - dev
    - /^APIGOV-.*$/
  except:
    - web
    - triggers

.only-tags: &only-tags
  only:
    - tags

.only-release: &only-release
  only:
    - web
    - triggers

############################################################
# Section for build command scripts
############################################################
.configure-git-ssh: &configure-git-ssh |
  which ssh-agent || ( apk update && apk add openssh-client )
  eval $(ssh-agent -s)
  echo "$GIT_SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  echo "$GIT_SSH_KNOWN_HOST" > ~/.ssh/known_hosts
  chmod 644 ~/.ssh/known_hosts
  echo -n | openssl s_client -showcerts -connect git.ecd.axway.int:443 2>/dev/null  | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ~/git-ecd-axway-int.pem
  git config --global http."https://git.ecd.axway.int/".sslCAInfo ~/git-ecd-axway-int.pem
  git config --global push.default matching
  git config --global user.email "builder-lphxmjtnt11@axway.com"
  git config --global user.name "builder-lphxmjtnt11"
  git config --global push.followTags true
  git remote set-url --push origin "git@git.ecd.axway.int:${CI_PROJECT_PATH}.git"

.prepare-path: &prepare-path |
  mkdir -p ${GOPATH}/src/git.ecd.axway.int/apigov
  cd ${GOPATH}/src/git.ecd.axway.int/apigov
  ln -s ${CI_PROJECT_DIR} apic_agents_sdk
  cd ${GOPATH}/src/git.ecd.axway.int/apigov/apic_agents_sdk

.get-latest-version: &get-latest-version |
  export IMAGE_NAME=${PROJECT}/${PACKAGE_NAME}
  if [ $(cat version) == 0.0.1 ];
    then 
    export CI_COMMIT_SHA=$(git rev-parse --short=8 HEAD)
    export IMAGE_VERSION="0.0.1-${CI_COMMIT_SHA}";
  else
  if [ $(git --version | grep -Eo '2.*') ];
    then export IMAGE_VERSION=$(git tag -l --sort="version:refname" | grep -Eo '[0-9]{1,}\.[0-9]{1,}\.[0-9]' | tail -1)
    else export IMAGE_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
    fi
  fi

############################################################
# Section for test and sonar
############################################################
test:
  stage: test
  image: beano.swf-artifactory.lab.phx.axway.int/beano-alpine-security:latest
  before_script:
    - *prepare-path
  script:
    - make test
  <<: *only-feature

sonar:
  stage: sonar
  image: beano.swf-artifactory.lab.phx.axway.int/beano-alpine-security:latest
  before_script:
    - *prepare-path
  script:
    - make sonar
  <<: *only-protected

############################################################
# Section for lint builds stage
############################################################
.lint-template: &lint-template
  image: beano.swf-artifactory.lab.phx.axway.int/beano-alpine-base:latest
  before_script:
    - *prepare-path
    - go get golang.org/x/lint/golint
  script:
    - make lint

lint-test:
  stage: test
  <<: *lint-template
  <<: *only-feature

lint-sonar:
  stage: sonar
  <<: *lint-template
  <<: *only-protected

############################################################
# Section for security tools
############################################################
include:
  - project: "scurity/gitlabci"
    ref: master
    file: "/.gitlab-ci-prepcsr.yml"
  - project: "scurity/gitlabci"
    ref: master
    file: "/.gitlab-ci-dependencycheck.yml"
  - project: "scurity/gitlabci"
    ref: master
    file: "/.gitlab-ci-gosec.yml"
  - project: "scurity/gitlabci"
    ref: master
    file: "/.gitlab-ci-csr.yml"

gosec:
  retry: 0
  except:
    - schedules
    - tags
    - web
    - triggers

dependencycheck:
  retry: 0
  except:
    - schedules
    - tags
    - web
    - triggers

gosec:on-schedule:
  retry: 0
  before_script:
    - git config --global http.sslVerify false
    - git fetch && git checkout master
    - *get-latest-version
    - if [[ ${IMAGE_VERSION} =~ "0.0.1-" ]]; then echo "Scanning 0.0.1 thru master branch"; else echo "Checking out ${IMAGE_VERSION}" && git checkout ${IMAGE_VERSION}; fi

dependencycheck:on-schedule:
  retry: 0
  before_script:
    - git config --global http.sslVerify false
    - git fetch && git checkout master
    - *get-latest-version
    - if [[ ${IMAGE_VERSION} =~ "0.0.1-" ]]; then echo "Scanning 0.0.1 thru master branch"; else echo "Checking out ${IMAGE_VERSION}" && git checkout ${IMAGE_VERSION}; fi

run-csr:
  dependencies:
    - dependencycheck
    - gosec
  <<: *only-feature

update-csr:
  dependencies:
    - dependencycheck:on-schedule
    - gosec:on-schedule

############################################################
# Section for release stage
############################################################
# Release Promotion job - Creates a tag from master branch
#   - Job runs only if pipeline triggered from Gitlab Web UI or trigger
#   - Job requires PROMOTION_TYPE environment variable with either of the following values
#       "major" - master branch is promoted with major number
#       "minor" - master branch is promoted with minor number
#       "patch" - master branch is promoted with patch number
# Note :
#   Job completion creates tags using current version of master and updates version of master
#   based on the promotion type. New Pipelines will be triggered for the new tag and updated
#   master.
release-promotion:
  stage: release
  image: beano.swf-artifactory.lab.phx.axway.int/beano-alpine-security:latest
  when: manual
  variables:
    GIT_STRATEGY: clone
  before_script:
    - *prepare-path
    - *configure-git-ssh
  script:
    - chmod +x ./build/scripts/promote.sh
    - ./build/scripts/promote.sh
  allow_failure: false
  <<: *only-release
